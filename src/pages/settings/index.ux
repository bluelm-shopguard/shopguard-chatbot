<template>
  <div class="page {{themeClass}}">
    <!-- Header -->
    <div class="page-header">
      <div class="header-button" onclick="goBack">
        <text class="header-icon">←</text>
      </div>
      <text class="page-header-title">设置</text>
    </div>
    
    <!-- Settings Content -->
    <div class="page-content">
      <!-- General Settings Group -->
      <div class="setting-group">
        <text class="setting-group-title">通用</text>
        <div class="setting-list">
          <!-- Theme Setting -->
          <div class="setting-list-item">
            <text class="setting-label">外观模式</text>
            <div class="setting-control">
              <div class="segmented-control">
                <div 
                  for="{{themeOptions}}" 
                  class="{{currentTheme === $item.id ? 'control-option-selected' : 'control-option'}}"
                  onclick="setTheme($item.id)">
                  <text class="option-text">{{$item.name}}</text>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Language Setting -->
          <div class="setting-list-item">
            <text class="setting-label">语言</text>
            <div class="setting-control">
              <div class="segmented-control">
                <div 
                  for="{{languageOptions}}" 
                  class="{{currentLanguage === $item.id ? 'control-option-selected' : 'control-option'}}"
                  onclick="setLanguage($item.id)">
                  <text class="option-text">{{$item.name}}</text>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Chat Settings Group -->
      <div class="setting-group">
        <text class="setting-group-title">聊天</text>
        <div class="setting-list">
          <!-- Save Chat History Setting -->
          <div class="setting-list-item">
            <text class="setting-label">保存聊天记录</text>
            <div class="setting-control">
              <div class="toggle-switch">
                <switch checked="{{saveChatHistory}}" onchange="toggleSaveChatHistory"></switch>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- About Settings Group -->
      <div class="setting-group">
        <text class="setting-group-title">关于</text>
        <div class="setting-list">
          <!-- About App Link -->
          <div class="setting-list-item is-link" onclick="navigateTo('pages/about')">
            <text class="setting-label">关于 ShopGuard AI</text>
            <text class="item-icon">›</text>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import router from '@system.router'
import storage from '@system.storage'
// Use require instead of import for theme manager
const ThemeManager = require('../../helper/theme-manager').ThemeManager

export default {
  data() {
    return {
      themeClass: 'light-theme',
      currentTheme: 'light',
      saveHistory: true,
      currentLanguage: 'zh-CN',
      themeOptions: [],
      languageOptions: []
    }
  },
  
  onInit: function() {
    console.log('Settings page loaded')
    // Load user settings using the direct method
    this.loadSettings()
    // Apply current theme
    this.applyCurrentTheme()
  },
  
  onShow: function() {
    this.applyCurrentTheme()
  },
  
  // Apply the current theme from global settings
  applyCurrentTheme: function() {
    const app = this.$app.$def;
    if (app && app.globalData && app.globalData.themeManager) {
      this.themeClass = app.globalData.themeManager.getThemeClass();
      this.currentTheme = app.globalData.userSettings.theme.default;
      console.log(`[SettingsPage] Applied theme: ${this.themeClass}`)
    }
  },
  
  // Direct methods
  loadSettings: function() {
    try {
      const app = this.$app.$def
      
      // Check if app is available
      if (!app) {
        console.error('App is not available')
        return
      }
      
      // Diagnose globalData structure
      console.log('App globalData available:', !!app.globalData)
      if (app.globalData) {
        console.log('Available globalData properties:', Object.keys(app.globalData).join(', '))
        console.log('userSettings available:', !!app.globalData.userSettings)
        console.log('themeManager available:', !!app.globalData.themeManager)
      }
      
      // Get user settings safely
      if (!app.globalData || !app.globalData.userSettings) {
        console.log('Using default settings as app.globalData.userSettings is not available')
        return
      }
      
      const userSettings = app.globalData.userSettings
      
      // Set theme
      if (userSettings.theme) {
        this.currentTheme = userSettings.theme.default || 'light';
        this.themeOptions = userSettings.theme.options || [];
        console.log('Loaded theme:', this.currentTheme);
        console.log('Loaded theme options:', this.themeOptions);
      } else {
        console.log('No theme setting found, using default:', this.currentTheme)
      }
      
      // Set language
      if (userSettings.language) {
        this.currentLanguage = userSettings.language.default || 'zh-CN';
        this.languageOptions = userSettings.language.options || [];
        console.log('Loaded language:', this.currentLanguage);
      } else {
        console.log('No language setting found, using default:', this.currentLanguage)
      }
      
      // Set chat history setting
      if (userSettings.chat && userSettings.chat.history !== undefined) {
        this.saveChatHistory = userSettings.chat.history.save !== false
        console.log('Loaded save chat history:', this.saveChatHistory)
      } else {
        console.log('No chat history setting found, using default:', this.saveChatHistory)
      }
    } catch (error) {
      console.error('Error loading settings:', error.message)
      console.error('Error stack:', error.stack)
      console.log('Using default settings')
    }
  },
  
  // Set theme - Moved outside methods object
  setTheme: function(themeId) {
    this.$app.$def.toggleTheme(themeId);
    this.applyCurrentTheme();
  },
  
  // Set language - Moved outside methods object
  setLanguage: function(languageId) {
    try {
      console.log('Setting language to:', languageId)
      this.currentLanguage = languageId
      
      // Update app global data
      const app = this.$app.$def
      if (app.globalData.userSettings) {
        app.globalData.userSettings.language = app.globalData.userSettings.language || {}
        app.globalData.userSettings.language.default = languageId
        app.saveUserSettings()
        
        // Apply language
        if (app.globalData.languageManager) {
          app.globalData.languageManager.setLanguage(languageId)
        }
        
        // Show toast confirmation
        app.showToast('语言已更改')
      }
    } catch (error) {
      console.error('Error setting language:', error)
      this.displayError('设置语言时出错')
    }
  },
  
  // Toggle save chat history - Moved outside methods object
  toggleSaveChatHistory: function(e) {
    try {
      console.log('Toggling save chat history to:', e.checked)
      this.saveChatHistory = e.checked
      
      // Update app global data
      const app = this.$app.$def
      if (app.globalData.userSettings) {
        app.globalData.userSettings.chat = app.globalData.userSettings.chat || {}
        app.globalData.userSettings.chat.history = app.globalData.userSettings.chat.history || {}
        app.globalData.userSettings.chat.history.save = this.saveChatHistory
        app.saveUserSettings()
        
        // Show toast confirmation
        app.showToast(this.saveChatHistory ? '已开启聊天记录保存' : '已关闭聊天记录保存')
      }
    } catch (error) {
      console.error('Error toggling chat history:', error)
      this.displayError('设置聊天记录时出错')
    }
  },
  
  // Display error message - Moved outside methods object
  displayError: function(message) {
    this.errorMessage = message
    // Show toast with error message
    this.$app.$def.showToast(message)
  },
  
  // Navigate to a page - Moved outside methods object
  navigateTo: function(page) {
    router.push({
      uri: page
    })
  },
  
  // Go back - Moved outside methods object
  goBack: function() {
    // Use home as fallback
    try {
      router.back()
    } catch (error) {
      console.error('Navigation back failed, going to home page')
      router.push({
        uri: 'pages/home'
      })
    }
  }
}
</script>

<style>
.page {
  flex-direction: column;
  width: 100%;
  height: 100%;
}

.page.light-theme {
  background-color: #f3f4f6;
}

.page.dark-theme {
  background-color: #0f172a;
}

/* Header Styles */
.page-header {
  display: flex;
  flex-direction: row;
  align-items: center;
  padding: 12px 16px;
}

.light-theme .page-header {
  background-color: #ffffff;
  border-bottom: 1px solid #e5e7eb;
}

.dark-theme .page-header {
  background-color: #1e293b;
  border-bottom: 1px solid #334155;
}

.header-button {
  padding: 10px;
  width: 48px;
  height: 48px;
  align-items: center;
  justify-content: center;
  border-radius: 8px;
}

.header-icon {
  font-size: 28px;
  text-align: center;
}

.light-theme .header-icon {
  color: #6b7280;
}

.dark-theme .header-icon {
  color: #94a3b8;
}

.page-header-title {
  flex: 1;
  font-size: 32px;
  font-weight: bold;
  text-align: center;
  margin-right: 48px;
}

.light-theme .page-header-title {
  color: #111827;
}

.dark-theme .page-header-title {
  color: #f1f5f9;
}

/* Content Styles */
.page-content {
  flex: 1;
  flex-direction: column;
  width: 100%;
  padding: 20px 16px;
}

/* Setting Group Styles */
.setting-group {
  margin-bottom: 24px;
}

.setting-group-title {
  font-size: 18px;
  font-weight: 600;
  padding: 0 4px;
  margin-bottom: 8px;
}

.light-theme .setting-group-title {
  color: #6b7280;
}

.dark-theme .setting-group-title {
  color: #94a3b8;
}

.setting-list {
  flex-direction: column;
  border-radius: 16px;
  overflow: hidden;
}

.light-theme .setting-list {
  background-color: #ffffff;
}

.dark-theme .setting-list {
  background-color: #1e293b;
}

.setting-list-item {
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
  padding: 16px 20px;
}

.light-theme .setting-list-item {
  border-bottom: 1px solid #e5e7eb;
}

.dark-theme .setting-list-item {
  border-bottom: 1px solid #334155;
}

.light-theme .is-link {
  background-color: #ffffff;
}

.dark-theme .is-link {
  background-color: #1e293b;
}

.setting-label {
  font-size: 22px;
  font-weight: 500;
}

.light-theme .setting-label {
  color: #111827;
}

.dark-theme .setting-label {
  color: #f1f5f9;
}

.setting-control {
  flex-direction: row;
  align-items: center;
  margin-left: 16px;
}

/* Segmented Control Styles */
.segmented-control {
  flex-direction: row;
  border-radius: 8px;
  padding: 2px;
}

.light-theme .segmented-control {
  background-color: #e5e7eb;
}

.dark-theme .segmented-control {
  background-color: #0f172a;
}

.control-option {
  padding: 8px 16px;
  margin: 2px;
  border-radius: 6px;
  background-color: transparent;
  border: 2px solid transparent;
}

.control-option-selected {
  padding: 8px 16px;
  margin: 2px;
  border-radius: 6px;
}

.light-theme .control-option-selected {
  background-color: #ffffff;
  border: 2px solid #10a37f;
}

.dark-theme .control-option-selected {
  background-color: #334155;
  border: 2px solid #10a37f;
}

.option-text {
  font-size: 18px;
}

.light-theme .option-text {
  color: #374151;
}

.dark-theme .option-text {
  color: #cbd5e1;
}

.control-option-selected .option-text {
  font-weight: 700;
}

.light-theme .control-option-selected .option-text {
  color: #10a37f;
}

.dark-theme .control-option-selected .option-text {
  color: #10a37f;
}

/* Toggle Switch Styles */
.toggle-switch {
  width: 60px;
}

.item-icon {
  font-size: 24px;
  margin-left: 8px;
}

.light-theme .item-icon {
  color: #9ca3af;
}

.dark-theme .item-icon {
  color: #94a3b8;
}
</style>
